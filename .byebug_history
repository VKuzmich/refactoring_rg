exit
updating_db(@account)
exit
expect(file_accounts.first.cards.first.number.length).to be 16
expect(file_accounts.first.cards.first.balance).to eq card_info[:balance]
expect(file_accounts.first.cards.first.type).to eq card_info[:type]
file_accounts = YAML.load_file(OVERRIDABLE_FILENAME)
expect(File.exist?(OVERRIDABLE_FILENAME)).to be true
current_subject.send(:create_new_type_card)
expect(current_subject).to receive_message_chain(:gets, :chomp) { card_info[:type] }
exit
@account.cards.empty?
exit
@account.cards.empty?
exit
updating_db(@account)
exit
updating_db(@account)
exit
current_subject.instance_variable_set(:@account, real_account)
real_account
current_subject
current_subject.instance_variable_set(@account, real_account)
current_subject
real_account
@account
current_subject.instance_variable_set(@account, real_account)
expect(current_subject).to receive(:puts).with(I18n.t('create_card_phrases'))
exit
commands
allow_any_instance_of(CardsConsole).to receive(:updating_db)
allow(current_subject).to receive(:exit_console)
current_subject.instance_variable_set(:@account, instance_double('Account', name: name, cards: [nil]))
exit
@account
cards
exit
@account
@account.cards.empty?
exit
(expect(current_subject).to receive(method_name))
index > 3 ? (expect(current_subject).to receive(method_name))
exit
allow_any_instance_of(CardsConsole).to receive(:updating_db)
exit
ommand = user_input
exit
continue
output(I18n.t('MAIN_MENU', name: @account.name))
exit
COMMANDS[:show_cards] exit
COMMANDS[:show_cards] 
show_cards
exit
          current_subject.send(:main_menu)
          allow(current_subject).to receive_message_chain(:gets, :chomp).and_return(command, 'exit')
          index > 3 ? (expect(current_subject).to receive(method_name)) : (expect_any_instance_of(CardsConsole).to receive(method_name))
commands.each_with_index do |(command, method_name), index|
 allow_any_instance_of(CardsConsole).to receive(:updating_db)
allow(current_subject).to receive(:exit_console)
current_subject.instance_variable_set(:@account, instance_double('Account', name: name, cards: [nil]))
current_subject.send(:main_menu)
commands.each_with_index do |(command, method_name), index| index > 3 ? (expect(current_subject).to receive(method_name)) : (expect_any_instance_of(CardsConsole).to receive(method_name)) allow(current_subject).to receive_message_chain(:gets, :chomp).and_return(command, 'exit') current_subject.send(:main_menu)
          index > 3 ? (expect(current_subject).to receive(method_name)) : (expect_any_instance_of(CardsConsole).to receive(method_name))
|(command, method_name), index|
exit
log_and_pass(login, password)
exit
log_and_pass(login, password)
log_and_pass
@account = Account.find_account((log_and_pass),accounts_db)
exit
.find_account
 @account = Account.(login, password).find_account(accounts)
 @account = Account.(login, password).find_account(accounts_db)
login = user_login
exit
current_subject.console_menu
exit
current_subject.console_menu
exit
current_subject.console_menu
exit
current_subject.console_menu
exit
continue
file_path
continue
account.file_path
exit
@account.destroy
exit
@account.destroy
write_to_file(accounts)
write_to_file
destroy
exit
load_db.reject { |account| accounts.push(account) unless account.login == @account.current_account.login }
write_to_file(accounts)
destroy(accounts)
exit
destroy
@account.destroy
exit
destroy
@account
@account.destroy
destroy
@account.current_account.destroy
exit
destroy(accounts)
write_to_file(accounts)
destroying_account(accounts)
@account.current_account
@account.current_account.destroying_account(accounts)
@account.current_account.destroy
exit
write_to_file(load_db.reject { |account| accounts << account unless account.login == @account.current_account.login })
exit
destroying_account(accounts)
exit
destroying_account(accounts)
write_to_file(accounts)
destroy(accounts)
accounts = []
exit
write_to_file(destroy(accounts))
write_to_file(accounts)
destroy(accounts)
exit
destroy
@account.destroy.login
destroy
@account.destroy
@account.current_account
@account
accounts = []
exit
write_to_file(load_db.reject { |account| new_accounts.push(account) unless account.login == @account.current_account.login })
write_to_file
destroy(new_accounts)
reject
load_db.reject { |account| new_accounts.push(account) unless account.login == @account.current_account.login }
{ |account| new_accounts.push(account) unless account.login == @account.current_account.login }
exit
write_to_file(new_accounts)
destroy
 destroy(new_accounts)
exit
 @account.current_account.card.any?
exit
main_menu_message
exit
#<RSpec::Mocks::VerifyingMessageExpectation #<Console:0x00007f880ea09798 @account=#<Account:0x00007f880e9f9f78 @card=[], @errors=[], @file_path="accounts.yml", @current_account=#<InstanceDouble(Account) (anonymous)>>>.exit(any arguments)>
allow(current_subject).to receive(:exit)
current_subject.instance_variable_set(:@account, account)
account.instance_variable_set(:@current_account, instance_double('Account', name: name))
exit
allow(current_subject).to receive(:exit)
current_subject.instance_variable_set(:@account, account)
account.instance_variable_set(:@current_account, instance_double('Account', name: name))
